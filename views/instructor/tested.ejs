<script type="text/javascript">
  // Client ID and API key from the Developer Console
  var CLIENT_ID = '<%= client_secret %>';

  // Array of API discovery doc URLs for APIs used by the quickstart
  var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest"];

  // Authorization scopes required by the API. If using multiple scopes,
  // separated them with spaces.
  var SCOPES = 'https://www.googleapis.com/auth/youtube';

  var authorizeButton = document.getElementById('authorize-button');
  /**
   *  On load, called to load the auth2 library and API client library.
   */
  function ClientLoad() {
    return new Promise((resolve, reject)=>{
      gapi.load('client:auth2', initClient);
    })
  }

  /**
   *  Initializes the API client library and sets up sign-in state
   *  listeners.
   */
  function initClient() {
    gapi.client.init({
      discoveryDocs: DISCOVERY_DOCS,
      clientId: CLIENT_ID,
      scope: SCOPES
    }).then(function () {
      // Listen for sign-in state changes.
      gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

      // Handle the initial sign-in state.
      updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      authorizeButton.onclick = handleAuthClick;
    });
  }

  /**
   *  Called when the signed in status changes, to update the UI
   *  appropriately. After a sign-in, the API is called.
   */
  function updateSigninStatus(isSignedIn) {
    if (isSignedIn) {
      insert();
    } else {
      window.alert('You need to authorize first! Click on Schedule');
    }
  }

  /**
   *  Sign in the user upon button click.
   */
  function handleAuthClick(event) {
    gapi.auth2.getAuthInstance().signIn();
  }

  /**
   *  Sign out the user upon button click.
   */
  /*function handleSignoutClick(event) {
    gapi.auth2.getAuthInstance().signOut();
  }*/

  /**
   * Append text to a pre element in the body, adding the given message
   * to a text node in that element. Used to display info from API response.
   *
   * @param {string} message Text to be placed in pre element.
   */
  /*function appendPre(message) {
    var pre = document.getElementById('content');
    var textContent = document.createTextNode(message + '\n');
    pre.appendChild(textContent);
  }*/

  /**
   * Print files.
   */
  function insert() {
    var title = document.getElementById('subject').value + document.getElementById('topic').value;
    var date = new Date(document.getElementById('date').value);
    var x = (document.getElementById('time').value).split(":");
    date.setHours(x[0]);
    date.setMinutes(x[1]);
    var broadcastParams = broadcastParams = {
      "part": "snippet,status,contentDetails",
      "resource": {
          "snippet": {
              "title": 'Physics',
              "scheduledStartTime": date,
          },
          "status": {
              "privacyStatus": "unlisted",
          },
          "contentDetails": {
              "monitorStream": {
                  "enableMonitorStream": true,
              }
          }
      }
    }
    gapi.client.youtube.liveBroadcasts.insert(broadcastParams).then(function(err, response) {
      if(err){
        return err;
      }
      else{
        console.log(response.result);
        document.getElementById('cast_id').value = response.result.id;
      }
    });
  }

  function submit(){
    ClientLoad().then(function(data){
      document.getElementById('schedule').submit();
    })
  }

</script>

<script async defer src="https://apis.google.com/js/api.js">
</script>
